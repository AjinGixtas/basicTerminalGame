[gd_resource type="CodeHighlighter" load_steps=2 format=3 uid="uid://qvnek50f1tqv"]

[sub_resource type="GDScript" id="GDScript_5w4u7"]
script/source = "extends SyntaxHighlighter

const KEYWORDS := [
	
]

const TYPES := [\"int\", \"float\", \"double\", \"string\", \"bool\", \"object\"]

var color_keyword = Color(0.5, 0.75, 1.0)
var color_type = Color(0.7, 1.0, 0.7)
var color_string = Color(1.0, 0.7, 0.7)
var color_comment = Color(0.6, 0.6, 0.6)
var color_number = Color(1.0, 0.9, 0.5)

func _get_line_syntax_highlighting(line: int) -> Dictionary:
	var text := get_text_edit().get_line(line)
	var highlights := {}

	# Keywords and types
	for word in text.split(\" \", false):
		var idx := text.find(word)
		if word in KEYWORDS:
			highlights[idx] = { \"color\": color_keyword }
		elif word in TYPES:
			highlights[idx] = { \"color\": color_type }

	# Strings
	var quote_start := text.find('\"')
	while quote_start != -1:
		var quote_end := text.find('\"', quote_start + 1)
		if quote_end != -1:
			for i in range(quote_start, quote_end + 1):
				highlights[i] = { \"color\": color_string }
			quote_start = text.find('\"', quote_end + 1)
		else:
			break

	# Comments
	var comment_index := text.find(\"//\")
	if comment_index != -1:
		for i in range(comment_index, text.length()):
			highlights[i] = { \"color\": color_comment }

	# Numbers
	for match in text.find(\"\\\\d+\", 0):
		for i in range(match[0], match[1]):
			highlights[i] = { \"color\": color_number }

	return highlights
"

[resource]
script = SubResource("GDScript_5w4u7")
